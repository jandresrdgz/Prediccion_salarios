theme(plot.title = element_text(size = 11, face = 'bold')) +
theme(axis.title = element_text(size = 10))
p3 <- ggplot(salario, aes(x = Salary)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = 'orange', alpha = 0.25) +
geom_density(col = 'orange') +
ggtitle("Distribucion de salario de los empleados") +
labs(y = 'Densidad', x = 'Salario') +
theme(plot.title = element_text(size = 11, face = 'bold')) +
theme(axis.title = element_text(size = 10))
wrap_plots(p1, p2, p3,
ncol = 1, nrow = 3,
widths = c(10, 10, 10), heights = c(5, 5, 5))
t <-  data.frame(Genero = levels(salario$Gender),
Total = as.vector(table(salario$Gender)),
F_relativa = as.vector(round(prop.table(table(salario$Gender)), 3)))
t <- t[order(t$Total, decreasing = T), ]
rownames(t) <- NULL
t
p0<- ggplot(t, mapping = aes(x = '', y = F_relativa, fill = Genero)) +
geom_bar(stat= 'identity', color = 'white') +
coord_polar(theta = 'y') +
geom_text(aes(label = percent(F_relativa)), position = position_stack(vjust = 0.5)) +
theme_void()
text<- "Parece que la base de datos se encuentra \nbalaceada si hablamos del genero de \nlos empleados, con una leve participacion \nmayor del genero masculino con un 54.8%"
p0| textGrob(text, just = 'right', hjust = 0.5)
levels(salario$Education.Level)[levels(salario$Education.Level)== 'PhD'] <- 'phD'
levels(salario$Education.Level)[levels(salario$Education.Level)== "Bachelor's"] <- "Bachelor's Degree"
levels(salario$Education.Level)[levels(salario$Education.Level)== "Master's"] <- "Master's Degree"
levels(salario$Education.Level)[1] <- 'Other'
t1 <-  data.frame(nivel_educacion = levels(salario$Education.Level),
Total = as.vector(table(salario$Education.Level)),
F_relativa = as.vector(round(prop.table(table(salario$Education.Level)), 3)))
t1 <- t1[order(t1$Total, decreasing = T), ]
rownames(t1) <- NULL
t1
ggplot(salario, aes(x = Education.Level, fill = Education.Level)) +
geom_bar(alpha = 0.85) +
labs(x = 'Nivel educativo', y = 'Cantidad empleados') +
ylim(c(0, 3500)) +
geom_text(aes(label = after_stat(count)), stat = 'count', position = position_dodge(0.5), vjust = -0.5, size = 4)
nube <- table(salario$Job.Title)
wordcloud2(data = nube, size = 0.5, color = 'random-light')
p4 <- ggplot(salario, aes(x= Age, y= Years.of.Experience)) +
geom_point(aes(colour = Years.of.Experience >= 3 & Years.of.Experience <= 12), alpha = 0.2) +
geom_hline(yintercept = 2.9, linetype = 'dashed', col = 'black') +
geom_hline(yintercept = 12.1, linetype = 'dashed', col = 'black') +
geom_segment(x =  33, y = 15, xend =  45, yend = 28, color = 'red', arrow = arrow(), linewidth = 1.5) +
ggtitle("Edad y Experiencia de los empleados") +
labs(x = "Edad", y = "Experiencia(Años)", color = "IQR (Exper.)") +
theme(plot.title = element_text(size = 11, face = 'bold'),
axis.title = element_text(size = 10))
p5<- ggplot(salario, aes(x= Age, y= Salary)) +
geom_point(aes(colour = Salary >= 70000 & Salary <= 160000), alpha = 0.2) +
geom_hline(yintercept = 70000, linetype = 'dashed', col = 'black') +
geom_hline(yintercept = 160000, linetype = 'dashed', col = 'black') +
geom_curve(x = 38, y= 10000, xend = 50, yend = 110000, color = 'red', arrow = arrow(),
linewidth = 1.5, curvature = -0.2) +
ggtitle("Edad y Salario de los empleados") +
labs(x = 'Edad', y= 'Salario', color = 'IQR (Salario)') +
theme(plot.title = element_text(size = 11, face = 'bold'),
axis.title = element_text(size = 10))
p6<- ggplot(salario, aes(x= Years.of.Experience, y= Salary)) +
geom_point(aes(colour = Salary >= 70000 & Salary <= 160000), alpha = 0.2) +
geom_hline(yintercept = 70000, linetype = 'dashed', col ='black') +
geom_hline(yintercept = 160000, linetype = 'dashed', col = 'black') +
geom_curve(x = 12, y= 25000, xend = 20, yend = 100000, curvature =  -0.2, color= 'red', arrow = arrow(), linewidth = 1.5) +
ggtitle("Experiencia (Años) y Salario de los empleados") +
labs(x = 'Experiencia (Años)', y= 'Salario', color= 'IQR (Salario)') +
theme(plot.title = element_text(size = 11, face ='bold'),
axis.title = element_text(size = 10))
#Diseño personalizado del plano
#diseño <- "111222
#3333#"
#p6 + p4 + p5 +
# plot_layout(design = diseño)
(p6 | p4) / p5
p7<- ggplot(salario, aes(x= Gender, y= Age, fill= Gender, alpha = 0.9)) +
stat_boxplot(geom= 'errorbar', width = 0.25) +
geom_boxplot() +
ggtitle("Distribucion de edad por genero de los empleados") +
labs(y = 'Edad', x= 'Genero') +
theme(legend.position = 'none',
plot.title = element_text(size = 11, face = 'bold'),
axis.title = element_text(size= 10))
p8<- ggplot(salario, aes(x= Education.Level, y= Age, fill= Education.Level, alpha= 0.9)) +
stat_boxplot(geom= 'errorbar', width= 0.25) +
geom_boxplot() +
ggtitle("Distribucion de edad por nivel de educacion") +
labs(y= 'Edad', x= 'Nivel de educacion') +
theme(legend.position= 'none',
plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size= 10))
p9<- ggplot(salario, aes(x= Gender, y= Years.of.Experience, fill= Gender, alpha= 0.9)) +
stat_boxplot(geom= 'errorbar', width= 0.25) +
geom_boxplot() +
ggtitle("Distribucion de años de experiencia por genero de los empleados") +
labs(y= 'Experiencia (años)', x='Genero') +
theme(legend.position = 'none',
plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size= 10))
p10<- ggplot(salario, aes(x= Education.Level, y= Years.of.Experience, fill= Education.Level, alpha= 0.9)) +
stat_boxplot(geom= 'errorbar', width= 0.25) +
geom_boxplot() +
ggtitle("Distribucion de años de experiencia por nivel de educacion") +
labs(y= 'Experiencia (asño)', x='Nivel de educacion') +
theme(legend.position = 'none',
plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size= 10))
p11<- ggplot(salario, aes(x= Gender, y= Salary, fill= Gender, alpha= 0.9)) +
stat_boxplot(geom= 'errorbar', width= 0.25) +
geom_boxplot() +
ggtitle("Distribucion del salario por genero de los empleados") +
labs(y= 'Salario', x='Genero') +
theme(legend.position = 'none',
plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size= 10))
p12<- ggplot(salario, aes(x= Education.Level, y= Salary, fill= Education.Level, alpha= 0.9)) +
stat_boxplot(geom= 'errorbar', width= 0.25) +
geom_boxplot() +
ggtitle("Distribucion del salario por nivel de educacion de los empleados") +
labs(y= 'Salario', x='Nivel de educacion') +
theme(legend.position = 'none',
plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size= 10))
salario_c <- salario
salario_c$edad_c <- cut(salario_c$Age, breaks = c(0, 15, 30, 45, 60, 75), right = FALSE)
salario_c$experiencia_c <- cut(salario_c$Years.of.Experience, breaks = c(0, 5, 10, 15, 20, 25, 30, 35), right = FALSE)
salario_c$salario_c <- cut(salario_c$Salary, breaks = c(0, 25000, 50000, 75000, 100000, 125000, 150000, 175000, 200000),
labels = c("(0,25.000]", "(25.000,50.000]", "(50.000,75.000]", "(75.000,100.000]", "(100.000,125.000]",
"(125.000,150.000]", "(150.000,175.000]", "(175.000,200.000]"))
t2<- table(salario_c$edad_c, salario_c$Gender, deparse.level = 1, dnn = c("Rango edad", "Genero Empleado"))
t3<- table(salario_c$experiencia_c, salario_c$Gender)
t4<- table(salario_c$salario_c, salario$Gender)
diseño<- "12
13
45
46
78
79
"
text1 <- paste("Se distribuye la variable edad en rangos de 15 años cada uno,",
"en donde se observa una participacion igualada excepto en",
"edades superiores a los 45 años, asi mismo la participacion",
"mas concentrada de mujeres entre 28 y 37 años aprox, mientras",
"que para hombres este rango aumenta hasta los 40 años.", sep = "\n")
text2 <- paste("Se distribuye la variable experiencia (años) en rangos de 5 años",
"cada uno, donde se observa -igual que en el caso anterior- una",
"mayor representacion de hombres con experiencia mayor de 15 años",
"mientras que para las mujeres su mediana se encuentra en 6 años ",
"aprox y casos atipicos con experiencias altas. (mayor 20 años)", sep = "\n")
text3 <- paste("Se distribuye la variable salario en rangos de 25.000 $mes, ",
"aqui una participacion mucho mas equilibrada de los rangos para",
"cada uno de los generos", sep = "\n")
p7 + tableGrob(t2, theme =  ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text1,just = 'centre',
x = 0.5, y= 0.6,
hjust = 0.5, vjust = 0.3) +
p9 + tableGrob(t3, theme = ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text2,
vjust = 0.3) +
p11+ tableGrob(t4, theme = ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text3,
vjust = -0.5) +
plot_layout(design = diseño)
t5<- table(salario_c$edad_c, salario_c$Education.Level, deparse.level = 1, dnn = c("Rango edad", "Nivel de educacion"))
t6<- table(salario_c$experiencia_c, salario_c$Education.Level)
t7<- table(salario_c$salario_c, salario$Education.Level)
text4 <- paste("Se observa como el nivel academico depende de la edad",
"(rquisitos) en la medida que aumenta el titutlo academico",
"La unica variable que parece tener una presencia importante de",
"outlieras es la de \`licenciatura`", sep = "\n")
text5 <- paste("La experiencia parece tambien estar relacionada con el nivel",
"educactivo, a mayor experiencia, mayor es el titulo que tienen",
"los empleados.", sep = "\n")
text6 <- paste("Finalmente, el salario (Variable a predecir) muestra importantes",
"diferencias en funcion del nivel educativo del empleado,", sep = "\n")
p8 + tableGrob(t5, theme =  ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text4,
vjust = 0.3) +
p10 + tableGrob(t6, theme = ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text5,
vjust = 0.3) +
p12+ tableGrob(t7, theme = ttheme_minimal(base_size = 9, padding =  unit(c(2, 2), "mm"))) + textGrob(text6,
vjust = -0.5) +
plot_layout(design = diseño)
ggpairs(salario,
columns = c(1, 5, 6),
aes(color = Gender, alpha = 0.005))
set.seed(42)
salario_f<- salario
names(salario_f)<- c("Age", "Gender", "Education.Level", ".", "Years.of.Experience", "Salary")
head(salario_f)
salario_f<- dummy_cols(salario_f, select_columns = c("Gender", "Education.Level", "."), remove_first_dummy = TRUE)
salario_f<- salario_f[,c(-2, -3, -4)]
sample<- sample.int(nrow(salario_f), floor(.8*nrow(salario_f)))
salario_train <- salario_f[sample,]
salario_test<- salario_f[-sample,]
salario_train$Salary<- sapply(salario_train$Salary, FUN = function(x){x/1000})
salario_test$Salary<- sapply(salario_test$Salary, FUN = function(x){x/1000})
#creacion de modelo basico
regresion0 <- lm(Salary~Age + Years.of.Experience, data = salario_train)
summary(regresion0)
s3d<- scatterplot3d(x= salario_train$Age, y= salario_train$Years.of.Experience, z= salario_train$Salary, pch = 16,
cex.lab = 1,
main = 'Distribucion de variables en plano \ntridimensional (Edad - experiencia - Salario)',
xlab = 'Edad', ylab = 'Experiencia(Anios)', zlab = 'Salario (miles USD)', highlight.3d = TRUE)
s3d$plane3d(regresion0, lty.box = 'solid', col = 'mediumblue')
regresion1 <- lm(Salary~Age + Years.of.Experience + Age:Years.of.Experience, data = salario_train)
summary(regresion1)
options(max.print = 150)
regresion2<- lm(Salary~., data = salario_train)
summary(regresion2)
layout(matrix(c(1,2,3,4),2,2))
plot(regresion2)
# Medición del error en datos de test
pred0<-predict(regresion0, salario_test, se.fit=TRUE)
RMSE0<-sqrt(mean((pred0$fit-salario_test$Salary)^2))
pred1<-predict(regresion1, salario_test, se.fit=TRUE)
RMSE1<-sqrt(mean((pred1$fit-salario_test$Salary)^2))
pred2<-predict(regresion2, salario_test, se.fit=TRUE)
RMSE2<-sqrt(mean((pred2$fit-salario_test$Salary)^2))
y_train_pred <- predict(regresion2, salario_train, se.fit=TRUE)
train<- data.frame(y_train_pred = y_train_pred$fit,
y_train = salario_train$Salary)
train$residuo <- train$y_train_pred - train$y_train
test<- data.frame(y_test_pred = pred2$fit,
y_test = salario_test$Salary)
test$residuo<- test$y_test_pred - test$y_test
ggplot() +
geom_point(data = train, aes(x= y_train_pred, y= residuo), shape = 16, col = 'red', alpha = 0.2) +
geom_point(data = test, aes(x=y_test_pred, y= residuo), shape =16, col = 'blue', alpha = 0.2) +
geom_hline(yintercept = 0, linewidth = 1) +
ggtitle("Residuos y predicciones") +
theme(legend.position = "left", plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size = 10)) +
labs(x= 'Prediccion (miles USD)', y= 'Residuo (miles USD)') +
geom_label(aes(x= 25, y= -60, label = "Test data"), stat = 'unique', size = 4, color = 'blue', fill = 'gray') +
geom_label(aes(x= 25, y= -74, label = "Train data"), stat = 'unique', size = 4, color = 'red', fill = 'gray')
regresion_step<- step(regresion2, direction = "both")
summary(regresion_step)
layout(matrix(c(1,2,3,4),2,2))
plot(regresion_step)
if(!require('glmnet')) install.packages('glmnet')
if(!require('glmnet')) install.packages('glmnet')
options(max.print = 2000)
summary(regresion_step)
View(salario_train)
knitr::opts_chunk$set(echo = TRUE)
if (!require('psych')) install.packages('psych')
if (!require('printr')) install.packages('printr')
if(!require('ggplot2')) install.packages('ggplo2')
if(!require('patchwork')) install.packages('patchwork')
if(!require('gmodels')) install.packages('gmodels')
if(!require('scales')) install.packages('scales')
if(!require('wordcloud2')) install.packages('wordcloud2')
if(!require('gridExtra')) install.packages('gridExtra')
if(!require('grid')) install.packages('grid')
if(!require('GGally')) install.packages('GGally')
if(!require('scatterplot3d')) install.packages('scatterplot3d')
if(!require('lmtest')) install.packages('lmtest')
if(!require('fastDummies')) install.packages('fastDummies')
if(!require('glmnet')) install.packages('glmnet')
predic_train<- model.matrix(Ssalary~. object = salario_train)
predic_train<- model.matrix(Salary~. ,object = salario_train)
View(salario_train)
if(!require('Matrix')) install.packages('Matrix')
predic_train<- model.matrix(Salary~., salario_train)
head(predic_train)
View(predic_train)
predic_train$Salary
View(predic_train)
predic_train<- model.matrix(Salary~., salario_train)[,-1]
predic_train_x<- model.matrix(Salary~., salario_train)[,-1]
predic_train_y<- salario_train$Salary
sal_rigde<- glmnet(predic_train_x, predic_train_y, alpha = 0)
plot(sal_rigde, xvar = "lambda")
dim(coef(sal_rigde))
coef(sal_rigde)
#coef(sal_rigde)
sal_rigde$lambda
plot(sal_rigde, xvar = "lambda")
?cv.glmnet
found.ridge<- cv.glmnet(predic_train_x, predic_train_y, alpha= 0)
plot(found.ridge)
mejor_lambda<- found.ridge$lambda.min
mejor_lambda
log(mejor_lambda)
coef(sal_rigde)[, which(sal_rigde$lambda==mejor_lambda)]
predic_test_x<- model.matrix(Salary~., salario_test)[,-1]
predic_test_y<- salario_test$Salary
predicciones_ridge<-predict.glmnet(sal_rigde, predic_test_x, s=found.ridge$lambda.min)
erroresridge=sqrt(mean((predicciones_ridge-predic_test_y[,1])^2))
erroresridge=sqrt(mean((predicciones_ridge-predic_test_y)^2))
erroresridge
regresion_step
regresion_step$coefficients
dim(regresion_step$coefficients)
regresion_step$coefficients
summary(regresion_step)
knitr::opts_chunk$set(echo = TRUE)
if (!require('psych')) install.packages('psych')
if (!require('printr')) install.packages('printr')
if(!require('ggplot2')) install.packages('ggplo2')
if(!require('patchwork')) install.packages('patchwork')
if(!require('gmodels')) install.packages('gmodels')
if(!require('scales')) install.packages('scales')
if(!require('wordcloud2')) install.packages('wordcloud2')
if(!require('gridExtra')) install.packages('gridExtra')
if(!require('grid')) install.packages('grid')
if(!require('GGally')) install.packages('GGally')
if(!require('scatterplot3d')) install.packages('scatterplot3d')
if(!require('lmtest')) install.packages('lmtest')
if(!require('fastDummies')) install.packages('fastDummies')
if(!require('glmnet')) install.packages('glmnet')
if(!require('Matrix')) install.packages('Matrix')
sal_lasso<- glmnet(predic_train_x, predic_train_y, alpha=1)
plot(sal_lasso, xvar='lambda')
found.lasso<- cv.glmnet(predic_train_x, predic_train_y, alpha= 1)
plot(found.lasso)
predicciones_lasso<- predict.glmnet(sal_lasso, predic_test_x, s= found.lasso$lambda.min)
erroreslasso<- sqrt(mean((predicciones_lasso-predic_test_t)^2))
erroreslasso=sqrt(mean((predicciones_lasso-predic_test_y)^2))
erroreslasso
erroresridge
erroreslasso
coef(sal_lasso,s=found.lasso$lambda.min)
knitr::opts_chunk$set(echo = TRUE)
if (!require('psych')) install.packages('psych')
if (!require('printr')) install.packages('printr')
if(!require('ggplot2')) install.packages('ggplo2')
if(!require('patchwork')) install.packages('patchwork')
if(!require('gmodels')) install.packages('gmodels')
if(!require('scales')) install.packages('scales')
if(!require('wordcloud2')) install.packages('wordcloud2')
if(!require('gridExtra')) install.packages('gridExtra')
if(!require('grid')) install.packages('grid')
if(!require('GGally')) install.packages('GGally')
if(!require('scatterplot3d')) install.packages('scatterplot3d')
if(!require('lmtest')) install.packages('lmtest')
if(!require('fastDummies')) install.packages('fastDummies')
salario_f<- salario
levels(salario$Education.Level)
salario_f$Education.Level <- ordered(salario$Education.Level, levels = c("Other", "High School", "Bachelor's Degree",
"Master's Degree", "phD"))
View(salario_f)
str(salario_F)
str(salario_f)
levesl(salario_f$Education.Level)
levels(salario_f$Education.Level)
names(salario_f)<- c("Age", "Gender", "Education.Level", ".", "Years.of.Experience", "Salary")
head(salario_f)
salario_f<- salario
salario_f$Education.Level <- ordered(salario$Education.Level, levels = c("Other", "High School", "Bachelor's Degree",
"Master's Degree", "phD"),
labels = c(0, 1, 2, 3, 4))
names(salario_f)<- c("Age", "Gender", "Education.Level", ".", "Years.of.Experience", "Salary")
View(salario_f)
View(salario_f)
salario_f<- dummy_cols(salario_f, select_columns = c("Gender", "."), remove_first_dummy = TRUE)
salario_f<- salario_f[,c(-2, -4)]
View(salario_f)
if(!require('e1071')) install.packages('e1071')
if(!require('e1071')) install.packages('e1071')
sample<- sample.int(nrow(salario_f), floor(.8*nrow(salario_f)))
salario_train <- salario_f[sample,]
salario_test<- salario_f[-sample,]
salario_train$Salary<- sapply(salario_train$Salary, FUN = function(x){x/1000})
salario_test$Salary<- sapply(salario_test$Salary, FUN = function(x){x/1000})
regression_svr = svm(formula = Salary ~ .,
data = salarion_train,
type = "eps-regression",
kernel = "radial")
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "radial")
pred3<-predict(regression_svr, salario_test, se.fit=TRUE)
RMSE3<-sqrt(mean((pred3$fit-salario_test$Salary)^2))
View(salario_test)
RMSE3<-sqrt(mean((pred3$fit- salario_test$Salary)^2))
pred3
pred3<-predict(regression_svr, salario_test, se.fit=TRUE)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "poly")
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
y_train_pred <- predict(regression_svr, salario_train, se.fit=TRUE)
train<- data.frame(y_train_pred = y_train_pred,
y_train = salario_train$Salary)
train$residuo <- train$y_train_pred - train$y_train
test<- data.frame(y_test_pred = pred3,
y_test = salario_test$Salary)
test$residuo<- test$y_test_pred - test$y_test
ggplot() +
geom_point(data = train, aes(x= y_train_pred, y= residuo), shape = 16, col = 'red', alpha = 0.2) +
geom_point(data = test, aes(x=y_test_pred, y= residuo), shape =16, col = 'blue', alpha = 0.2) +
geom_hline(yintercept = 0, linewidth = 1) +
ggtitle("Residuos y predicciones") +
theme(legend.position = "left", plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size = 10)) +
labs(x= 'Prediccion (miles USD)', y= 'Residuo (miles USD)') +
geom_label(aes(x= 25, y= -60, label = "Test data"), stat = 'unique', size = 4, color = 'blue', fill = 'gray') +
geom_label(aes(x= 25, y= -74, label = "Train data"), stat = 'unique', size = 4, color = 'red', fill = 'gray')
?svm
knitr::opts_chunk$set(echo = TRUE)
if (!require('psych')) install.packages('psych')
if (!require('printr')) install.packages('printr')
if(!require('ggplot2')) install.packages('ggplo2')
if(!require('patchwork')) install.packages('patchwork')
if(!require('gmodels')) install.packages('gmodels')
if(!require('scales')) install.packages('scales')
if(!require('wordcloud2')) install.packages('wordcloud2')
if(!require('gridExtra')) install.packages('gridExtra')
if(!require('grid')) install.packages('grid')
if(!require('GGally')) install.packages('GGally')
if(!require('scatterplot3d')) install.packages('scatterplot3d')
if(!require('lmtest')) install.packages('lmtest')
if(!require('fastDummies')) install.packages('fastDummies')
if(!require('e1071')) install.packages('e1071')
salario_f<- salario
salario_f$Education.Level <- ordered(salario$Education.Level, levels = c("Other", "High School", "Bachelor's Degree",
"Master's Degree", "phD"),
labels = c(0, 1, 2, 3, 4))
names(salario_f)<- c("Age", "Gender", "Education.Level", ".", "Years.of.Experience", "Salary")
salario_f<- dummy_cols(salario_f, select_columns = c("Gender", "."), remove_first_dummy = TRUE)
salario_f<- salario_f[,c(-2, -4)]
sample<- sample.int(nrow(salario_f), floor(.8*nrow(salario_f)))
salario_train <- salario_f[sample,]
salario_test<- salario_f[-sample,]
salario_train$Salary<- sapply(salario_train$Salary, FUN = function(x){x/1000})
salario_test$Salary<- sapply(salario_test$Salary, FUN = function(x){x/1000})
set.seed(42)
salario_f<- salario
names(salario_f)<- c("Age", "Gender", "Education.Level", ".", "Years.of.Experience", "Salary")
head(salario_f)
salario_f<- dummy_cols(salario_f, select_columns = c("Gender", "Education.Level", "."), remove_first_dummy = TRUE)
salario_f<- salario_f[,c(-2, -3, -4)]
sample<- sample.int(nrow(salario_f), floor(.8*nrow(salario_f)))
salario_train <- salario_f[sample,]
salario_test<- salario_f[-sample,]
salario_train$Salary<- sapply(salario_train$Salary, FUN = function(x){x/1000})
salario_test$Salary<- sapply(salario_test$Salary, FUN = function(x){x/1000})
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "poly")
?svm
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "radial")
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "poly")
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
y_train_pred <- predict(regression_svr, salario_train, se.fit=TRUE)
train<- data.frame(y_train_pred = y_train_pred,
y_train = salario_train$Salary)
train$residuo <- train$y_train_pred - train$y_train
test<- data.frame(y_test_pred = pred3,
y_test = salario_test$Salary)
test$residuo<- test$y_test_pred - test$y_test
ggplot() +
geom_point(data = train, aes(x= y_train_pred, y= residuo), shape = 16, col = 'red', alpha = 0.2) +
geom_point(data = test, aes(x=y_test_pred, y= residuo), shape =16, col = 'blue', alpha = 0.2) +
geom_hline(yintercept = 0, linewidth = 1) +
ggtitle("Residuos y predicciones") +
theme(legend.position = "left", plot.title = element_text(size= 11, face= 'bold'),
axis.title = element_text(size = 10)) +
labs(x= 'Prediccion (miles USD)', y= 'Residuo (miles USD)') +
geom_label(aes(x= 25, y= -60, label = "Test data"), stat = 'unique', size = 4, color = 'blue', fill = 'gray') +
geom_label(aes(x= 25, y= -74, label = "Train data"), stat = 'unique', size = 4, color = 'red', fill = 'gray')
regression_svr = svm(formula = Salary ~ .,
data = salario_train,
type = "eps-regression",
kernel = "poly")
pred3<-predict(regression_svr, salario_test)
RMSE3<-sqrt(mean((pred3 - salario_test$Salary)^2))
RMSE3
regresion_svr_tune<- tune(svm, Salary ~., data = salario_train,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(seq(0.5,8,.5))))
plot(regresion_svr_tune)
regresion_svr_tune$best.model$epsilon
tuneResult <- tune(svm, Salary ~ .,  data = salario_train,
ranges = list(epsilon = seq(regresion_svr_tune$best.model$epsilon-.15,
regresion_svr_tune$best.model$epsilon+.15,
0.01),
cost = seq(2^(log2(regresion_svr_tune$best.model$cost)-1),
2^(log2(regresion_svr_tune$best.model$cost)+1),
length=6))
)
regresion_svr_tune$best.model$epsilon
regresion_svr_tune$best.model$cost
regresion_svr_tune<- tune(svm, Salary ~., data = salario_train,
ranges = list(epsilon = seq(0.8,1.5,0.3), cost = 2^(seq(7,10,.5))))
plot(regresion_svr_tune)
regresion_svr_tune$best.model$epsilon
regresion_svr_tune$best.model$cost
regresion_svr_tune<- tune(svm, Salary ~., data = salario_train,
ranges = list(epsilon = seq(1.5,4, 0.5), cost = 2^(seq(10,15,1))))
